Problem statement:->>
For a given two-dimensional square matrix of size (N x N). Find the total sum of elements on both the diagonals and at all the four boundaries.

Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= t <= 10^2
0 <= N <= 10^3
Time Limit: 1sec
Sample input 1:
1
3
1 2 3
4 5 6
7 8 9
Sample Output 1:
45
Explanation for Sample Output 1:
The boundary elements are 1, 2, 3, 6, 9, 8, 7 and 4. 

The first-diagonal elements are 1, 5 and 9. 

The second-diagonal elements are 3, 5 and 7.

We just need to add all these numbers making sure that no number is added twice. 
For example, '1' is both a boundary element and a first-diagonal element similarly, '5' contributes to both the diagonals but they won't be added twice.

Hence, we add up, [1 + 2 + 3 + 6 + 9 + 8 + 7 + 4 + 5] to give 45 as the output.
Sample input 2:
2
5
1 2 3 4 5
6 7 8 9 10
11 12 13 14 15
16 17 18 19 20
21 22 23 24 25
4
1 2 3 10
4 5 6 11
7 8 9 12
13 14 15 16
Sample Output 2:
273
136
>>>>>>>>>>
>>>>>
Solution:->>>.

public class Solution {

	public static void totalSum(int[][] mat) {
		int row = mat.length;
		int odd = row % 2;
		int sum = 0;
		// for top and bottom row sum
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < row; j++) {
				if (i == 0 || i == row - 1) {
					sum = sum + mat[i][j];
				}
			}
		}
		// for left and right column sum exclude corner value
		for (int i = 0; i < row; i++) {
			for (int j = 1; j < row - 1; j++) {
				if (i == 0 || i == row - 1) {

					sum = sum + mat[j][i];
				}
			}
		}
		// for left diagonal sum exclude corner value
		for (int i = 1; i < row - 1; i++) {
			for (int j = 1; j < row - 1; j++) {
				if (i == j) {
					sum = sum + mat[i][j];
				}
			}
		}
		// for right diagonal sum exclude corner value but if (row=odd )then center
		// incude
		for (int i = 1; i < row - 1; i++) {
			for (int j = i; j <= i; j++) {
				sum = sum + mat[i][row - 1 - j];
				
			}
		}
		if (odd != 0) {
			int center = 0;
			center = mat[row / 2][row / 2];
			System.out.println(sum - center);
			return;
		}
		System.out.println(sum);

	}

}
